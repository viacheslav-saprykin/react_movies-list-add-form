{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","formValues","setFormValues","noSpaces","trim","isFormInvalid","onSubmit","preventDefault","disabled","App","moviesFromServer","visibleMovie","setVisibleMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3808807.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd(movie: Movie): void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [formValues, setFormValues] = useState<Movie>({\n    title: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    description: '',\n  });\n\n  const noSpaces = (value: string) => {\n    return value.trim() === '';\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (\n      formValues.title\n      && formValues.imgUrl\n      && formValues.imdbUrl\n      && formValues.imdbId\n    ) {\n      onAdd({\n        title: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n        description: '',\n      });\n      setFormValues({\n        title: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n        description: '',\n      });\n    }\n  };\n\n  const isFormInvalid\n    = noSpaces(formValues.title)\n    || noSpaces(formValues.imgUrl)\n    || noSpaces(formValues.imdbUrl)\n    || noSpaces(formValues.imdbId);\n\n  return (\n    <form\n      key={formValues.title}\n      className=\"NewMovie\"\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formValues.title}\n        onChange={(value) => setFormValues({ ...formValues, title: value })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formValues.description}\n        onChange={(value) => setFormValues(\n          { ...formValues, description: value },\n        )}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formValues.imgUrl}\n        onChange={(value) => setFormValues({ ...formValues, imgUrl: value })}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formValues.imdbUrl}\n        onChange={(value) => setFormValues({ ...formValues, imdbUrl: value })}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formValues.imdbId}\n        onChange={(value) => setFormValues({ ...formValues, imdbId: value })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFormInvalid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport './App.scss';\n\nexport const App = () => {\n  const [visibleMovie, setVisibleMovie] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setVisibleMovie(prevMovies => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovie} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}