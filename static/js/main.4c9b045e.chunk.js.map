{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","validator","useState","Math","random","toString","slice","id","touched","setTouched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","formValues","setFormValues","count","isValidUrl","test","isEmpty","trim","isFormInvalid","onSubmit","preventDefault","disabled","App","moviesFromServer","visibleMovies","setVisibleMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c9b045e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validator?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validator = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value && validator(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={(event) => {\n            onChange(event.target.value);\n            setTouched(true);\n          }}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd(movie: Movie): void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [formValues, setFormValues] = useState<Movie>({\n    title: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    description: '',\n  });\n\n  const [count] = useState(0);\n\n  const isValidUrl = (value: string) => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/; ;\n\n    return pattern.test(value);\n  };\n\n  const isEmpty = (value: string) => {\n    return value.trim() === '';\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (\n      formValues.title\n      && formValues.imgUrl\n      && formValues.imdbUrl\n      && formValues.imdbId\n    ) {\n      onAdd(formValues);\n      setFormValues({\n        title: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n        description: '',\n      });\n    }\n  };\n\n  const isFormInvalid\n    = isEmpty(formValues.title)\n    || isEmpty(formValues.imgUrl)\n    || isEmpty(formValues.imdbUrl)\n    || isEmpty(formValues.imdbId);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formValues.title}\n        onChange={(value) => setFormValues({ ...formValues, title: value })}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formValues.description}\n        onChange={(value) => setFormValues(\n          { ...formValues, description: value },\n        )}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formValues.imgUrl}\n        onChange={(value) => setFormValues({ ...formValues, imgUrl: value })}\n        required\n        validator={isValidUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formValues.imdbUrl}\n        onChange={(value) => setFormValues({ ...formValues, imdbUrl: value })}\n        required\n        validator={isValidUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formValues.imdbId}\n        onChange={(value) => setFormValues({ ...formValues, imdbId: value })}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isFormInvalid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\n\nimport moviesFromServer from './api/movies.json';\n\nimport './App.scss';\n\nexport const App = () => {\n  const [visibleMovies, setVisibleMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setVisibleMovies(prevMovies => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={visibleMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}